-------------------------------------------- SCREEN 000
( CGRAPH II LOAD SCREEN  LRP  1/27/85)  
                                        
141 147 THRU   ( PARNAS' IT )           
151 194 THRU                            
250 253 THRU   ( LEXICON )              
200 205 THRU   ( CGRAPH WORDS )         
                                        
( TRAVERSE )                            
                                        
210 212 THRU   ( QUEUE )                
213 222 THRU   ( TRAVERSE GRAPH )       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 001
( PARNAS' IT...TI STRUCTURE )           
                                        
                                        
: ROTB   ( N1 N2 N3 -- N3 N1 N2 )       
   ROT ROT ;                            
                                        
: BACK!  ( TO-ADR BRANCH ADDRESS -- )   
   SWAP OVER - SWAP ! ;                 
                                        
: BACKFILL  ( TO-ADR LIST-ADR -- )      
   BEGIN DUP WHILE DUP @ >R OVER SWAP   
   BACK! R> REPEAT DROP DROP ;          
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 002
( IT...TI WORDS )                       
                                        
: IT  ( -- IT-LOC ENDIT-LIST IT-ID# )   
   HERE 0 16 ; IMMEDIATE                
                                        
: ENDIT  ( IT-LOC ENDIT-LIST IT-ID# )   
     ( OR  IT-LOC ENDIT-LIST CAND-LIST  
     (     IFF-ID# -- )                 
   ?COMP DUP 18 = IF DROP HERE SWAP     
   BACKFILL 16 THEN 16 ?PAIRS HERE      
   SWAP BACKFILL DROP ; IMMEDIATE       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 003
( IT...TI )                             
                                        
: CAND  ( IT-LOC ENDIT-LIST IT-ID#      
    ( OR  IT LOC ENDIT-LIST CAND-LIST   
    (     COR-LIST CAND-ID# -- IT-LOC ) 
    (     ENDIT-LIST CAND-LIST  )       
    (     COR-LIST CAND-ID# )           
   ?COMP COMPILE 0BRANCH DUP            
   17 = IF    HERE ROT , SWAP           
        ELSE  16 ?PAIRS 0 HERE 0 , 17   
        THEN ; IMMEDIATE                
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 004
( IT...TI WORDS )                       
                                        
: COR  ( IT-LOC ENDIT-LIST IT-ID# )     
    ( OR IT-LOC ENDIT-LIST CAND-LIST )  
    (    COR-LIST CAND-ID# -- IT-LOC )  
    (    ENDIT-LIST CAND-LIST )         
    (    COR-LIST CAND-ID# )            
   ?COMP COMPILE 0= COMPILE 0BRANCH     
   DUP 17 = IF ROT HERE SWAP , ROTB     
   ELSE 16 ?PAIRS HERE 0 , 0 17 THEN ;  
   IMMEDIATE                            
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 005
( IT...TI WORDS )                       
                                        
: IFF  ( IT-LOC ENDIT-LIST IT-ID# )     
   ( OR  IT-LOC ENDIT-LIST CAND-LIST )  
   (     COR-LIST CAND-ID# -- IT-LOC )  
   (     ENDIT-LIST CAND-LIST IFF-ID# ) 
   [COMPILE] CAND DROP HERE ROT         
   BACKFILL 18 ; IMMEDIATE              
                                        
: BREAK ( IT-LOC ENDIT-LIST IT-ID# )    
     ( OR IT-LOC ENDIT-LIST CAND-LIST ) 
     ( IFF-ID# -- IT-LOC ENDIT-LIST )   
     ( IT-ID# )                         
   ?COMP DUP 16 = IF 2+ 0 SWAP THEN     
   18 ?PAIRS >R COMPILE BRANCH HERE     
   SWAP , HERE R> BACKFILL 16 ;         
   IMMEDIATE                            
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 006
( IT...TI WORDS )                       
                                        
: CONTINUE ( IT-LOC ENDIT-LIST IT-ID# ) 
        ( OR IT-LOC ENDIT-LIST )        
        (    CAND-LIST IFF-ID# )        
        (    -- IT-LOC ENDIT-LIST )     
        (    IT-ID# )                   
   ?COMP DUP 16 = IF 2+ 0 SWAP THEN     
   18 ?PAIRS >R COMPILE BRANCH OVER     
   HERE 0 , BACK! HERE R> BACKFILL      
   16 ; IMMEDIATE                       
                                        
                                        
: SUBCASES ( IT-LOC ENDIT-LIST )        
           ( CAND-LIST IFF-ID# )        
           ( -- CAND-LIST SUB-ID# )     
           ( IT-LOC ENDIT-LIST IT-ID# ) 
     ?COMP 18 ?PAIRS ROTB 19 ROTB 16 ;  
     IMMEDIATE                          
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 007
( IT...TI WORDS )                       
                                        
: ENDSUB  ( CAND-LIST SUB-ID# IT-LOC )  
          ( ENDIT-LIST IT-ID# -- )      
          ( IT-LOC ENDIT-LIST IT-ID# )  
    ?COMP 16 ?PAIRS ROT 19 ?PAIRS       
    ROT HERE SWAP BACKFILL 16 ;         
    IMMEDIATE                           
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 011
( CGAPH    LRP   1/26/85 )              
                                        
: CGRAPH ;                              
                                        
0 CONSTANT FALSE                        
                                        
1 CONSTANT TRUE                         
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 012
( LIST WORDS        LRP   1/26/85 )     
                                        
: GET  ( n -- adr of link )             
       ( Get link with n fields         
         from HERE.)                    
    DUP HERE SWAP 0 FILL                
        HERE SWAP ALLOT ;               
                                        
: PUT  ( list.adr  link.adr -- )        
    SWAP DDUP @ SWAP ! ( link <-        
                                <list>) 
              ! ;      ( list <- link ) 
                                        
: APPEND   ( le list -- )               
    OVER 0 SWAP !                       
    BEGIN DUP @ WHILE                   
    @ REPEAT ! ;                        
                                        
: #LIST   ( adr -- n )                  
     ( Given head of list, returns      
       no. elements in list. )          
   0 BEGIN    OVER @                    
     WHILE    1+   SWAP @ SWAP          
     REPEAT   SWAP DROP ;               
-------------------------------------------- SCREEN 013
( #LIST    LRP   1/26/85 )              
                                        
: POS  ( -- )                           
    ( Define POS )                      
    CREATE                              
    DOES> ;                             
                                        
: POS-PTR  ( node.adr -- )   4 + ;      
                                        
: !POS   ( pos node.adr -- )            
    POS-PTR ! ;                         
                                        
: @POS  ( node.adr -- ptr to pos )      
    POS-PTR  @ ;                        
                                        
: .POS   ( node.adr -- )                
   @POS NFA ID. ;                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 014
( POS  LRP  1/26/85 )                   
                                        
: CON-PTR   ( node.adr --  adr of ptr   
              to concept )              
    2+ ;                                
                                        
: !CONCEPT  ( adr of concept   node.adr 
              -- )                      
    CON-PTR ! ;                         
                                        
: @CONCEPT  ( node.adr -- ptr to        
              concept )                 
    CON-PTR @ ;                         
                                        
: .CONCEPT   ( node.adr -- )            
     @CONCEPT NFA ID. ;                 
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 015
( CONCEPTS      LRP     1/11/85 )       
                                        
: CONCEPT  ( -- )                       
    CREATE                              
      0 , 0 , 0 ,                       
    DOES> ;                             
                                        
: GRAPHS   ( adr -- adr1 )              
    0 + ;                               
                                        
: SUPERTYPES  ( adr -- adr1 )           
    2+ ;                                
                                        
: SUBTYPES    ( adr -- adr1 )           
    4 + ;                               
                                        
EXIT                                    
                                        
CONCEPT is a defining word to create    
concept headers in the FORTH            
dictionary -- e.g. CONCEPT UNICORN.     
UNICORN GRAPHS puts the address of the  
pointer to the graph list on the stack. 
                                        
-------------------------------------------- SCREEN 016
( CGRAPHS      LRP    1/11/85 )         
                                        
: VOCAB   ( -- )                        
    CREATE                              
      0 ,    ( Ptr to concepts list. )  
    DOES> ( Eventually put processing   
            word here ) ;               
                                        
EXIT                                    
                                        
VOCAB is a defining word to enter       
lexicon entries into the FORTH          
dictionary -- e.g. VOCAB unicorn.       
When the new word "unicorn" is executed 
the address of the head of the CONCEPTS 
list is put on the stack.               
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 017
( MEANS    LRP    1/13/85 )             
                                        
                                        
: MEANS  ( pos list.adr con.adr -- )    
     FIND 2+            ( con.adr )     
     OVER 6 GET  PUT       ( link )     
     OVER @  !CONCEPT                   
          @  !POS ;                     
                                        
                                        
                                        
EXIT                                    
                                        
MEANS links concept pointers to         
lexicon entries.                        
Example, NOUN cat MEANS ANIMAL. The     
lexicon entry can be linked to multiple 
concepts.                               
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 018
( MEANS?   LRP   1/27/85 )              
                                        
: MEANS?   ( adr -- )                   
    ( Given address of word in lexicon,)
    ( Traverse concept list. )          
    CR                                  
    BEGIN                               
       DUP @                            
    WHILE                               
       @ DUP          .CONCEPT          
         DUP 5 SPACES .POS              
         CR                             
    REPEAT DROP ;                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 019
( IS-A     LRP    1/13/85 )             
                                        
: IS-A         ( sub.adr  -- )          
   FIND 2+     ( sub.adr sup.adr -- )   
   DDUP SWAP SUPERTYPES DUP 4 GET PUT   
                        @  !CONCEPT     
             SUBTYPES   DUP 4 GET PUT   
                        @ !CONCEPT  ;   
                                        
                                        
                                        
                                        
EXIT                                    
                                        
IS-A links together the                 
SUBTYPE/SUPERTYPE lists. Example,       
FELINE IS-A ANIMAL.                     
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 020
(  RELATION    LRP   2/17/85 )          
                                        
: RELATION    ( n -- ; means relation   
                is n-adic )             
    CONSTANT ;                          
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 021
( TYPES?  DENOTES?   LRP   1/27/85 )    
                                        
VARIABLE ROOT                           
                                        
VARIABLE NODE.PTR                       
                                        
VARIABLE LIST.PTR                       
                                        
: GRAPHLIST   ( -- )                    
    ' GRAPHS LIST.PTR ! ;               
                                        
: SUBLIST  ( -- )                       
    ' SUBTYPES LIST.PTR ! ;             
                                        
: SUPLIST  ( -- )                       
    ' SUPERTYPES LIST.PTR ! ;           
                                        
: @LIST   ( concept.adr -- list.adr )   
    LIST.PTR @ CFA EXECUTE ;            
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 022
( TYPES?   DENOTES?   LRP   1/27/85 )   
                                        
: LCHILD   ( adr1 -- adr2 )             
    @ ;                                 
                                        
: RCHILD   ( adr1 -- adr2 )             
    @CONCEPT @LIST @ ;                  
                                        
: VISIT   ( adr -- )                    
    .CONCEPT  CR ;                      
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 023
( TYPES?  DENOTES?    LRP   1/27/85 )   
                                        
: PLUNGE     ( -- n1 n2 ... n )         
    ( Assumes address of concept is)    
    ( stored in NODE.PTR. )             
    BEGIN                               
      NODE.PTR  @ LCHILD                
    WHILE                               
      NODE.PTR @ NODE.PTR @             
      LCHILD NODE.PTR !                 
    REPEAT ;                            
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 024
( TYPES?  DENOTES?   LRP    1/27/85 )   
                                        
1 CONSTANT EXIT-FLG                     
                                        
: STEPRT   ( -- flg )                   
    BEGIN                               
      NODE.PTR @ VISIT                  
      NODE.PTR @ RCHILD NODE.PTR !      
      NODE.PTR @                        
          IF                            
             EXIT-FLG NOT EXIT-FLG      
          ELSE                          
             DEPTH IF                   
                     NODE.PTR !         
                     EXIT-FLG NOT       
                   ELSE                 
                     EXIT-FLG EXIT-FLG  
                   THEN                 
          THEN                          
    UNTIL  ;                            
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 025
( TYPES?  DENOTES?     LRP   1/27/85 )  
                                        
: TRAV    (  -- )                       
     ( Assume head of list is stored    
       in ROOT )                        
     ROOT @                             
         IF                             
           ROOT @  NODE.PTR !           
           BEGIN                        
             PLUNGE                     
             STEPRT                     
           UNTIL                        
         THEN ;                         
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 026
( TYPES?  DENOTES?    LRP    1/27/85 )  
                                        
: TYPES?  ( adr -- )                    
    SUPLIST                             
    CR SUPERTYPES @ ROOT !              
    TRAV ;                              
                                        
                                        
: DENOTES?  ( adr -- )                  
    SUBLIST                             
    CR SUBTYPES @ ROOT !                
    TRAV ;                              
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 027
EXIT                                    
                                        
Now I will start on the interpreter for 
the linear representation of conceptual 
graphs. See Sowa p. 78 & p. 395.        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 028
( NODESPACE      LRP    2/3/85 )        
                                        
2000 CONSTANT QUOTA                     
( Allocation for NODES  )               
                                        
VARIABLE NODESPACE QUOTA ALLOT          
( Space for nodes )                     
                                        
VARIABLE NODES                          
( Ptr to free space in NODESPACE )      
                                        
NODESPACE QUOTA + CONSTANT -NODES       
( Upper limit of NODESPACE )            
                                        
EXIT                                    
                                        
These words manage free space for       
graph nodes                             
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 029
( NODES?    LRP     2/3/85 )            
                                        
: NODES?  ( n -- ; where n is value )   
          ( to be added to NODES. )     
    NODES @ +                           
    -NODES SWAP - 0<                    
    ABORT" No room in NODESPACE " ;     
                                        
                                        
EXIT                                    
                                        
These words test whether or not free    
space is available in NODESPACE.        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 030
( Relocate operators   LRP   3/2/85 )   
                                        
VARIABLE GBASE                          
( Base address of graph )               
                                        
: RELOCATE  ( node.adr -- offset from   
              GBASE )                   
   GBASE @ - ;                          
                                        
: LOCATE   ( offset from GBASE --       
             node.adr )                 
   GBASE @ + ;                          
                                        
: REL@   ( relative.adr -- n )          
    LOCATE @ ;                          
                                        
: REL!   ( n relative.adr -- )          
    LOCATE ! ;                          
                                        
EXIT                                    
                                        
Operators to make graphs relocatable    
                                        
                                        
-------------------------------------------- SCREEN 031
( VARIABLES    LRP  2/3/85 )            
                                        
VARIABLE <GRAPHS>                       
( Ptr to list of graphs )               
                                        
                                        
VARIABLE <CON>                          
( Ptr to current concept node )         
                                        
VARIABLE TEMP                           
( Temporary storage for concept         
  pointer )                             
                                        
EXIT                                    
                                        
( Variables used in graph construction) 
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 032
( VARIABLES/RESET-NODES   LRP  2/3/85 ) 
                                        
VARIABLE <REL>                          
( Ptr to current relation node )        
                                        
VARIABLE <ARC#>                         
( Labels arc into relation )            
                                        
0 <ARC#> !                              
                                        
VARIABLE $BUFFER 40 ALLOT               
( String buffer )                       
                                        
: RESET-NODES  ( -- )                   
    NODESPACE NODES !                   
    0 <GRAPHS> !                        
    0 <CON> !                           
    0 <REL> ! ;                         
                                        
RESET-NODES                             
                                        
EXIT                                    
( Variables used in graph const         
                                        
-------------------------------------------- SCREEN 033
( MORE VARIABLES   LRP  2/14/85 )       
                                        
VARIABLE DIRFLAG                        
( 0 is <- ; 1 is -> )                   
                                        
VARIABLE ARCFLAG                        
( 1 means arc has has been entered.)    
0 ARCFLAG !                             
                                        
VARIABLE LASTFLAG                       
( 1 means last node entered was a       
  concept; 0 means relation. )          
0 LASTFLAG !                            
                                        
VARIABLE NESTFLAG                       
( 1 means we're starting a nest RLIST   
  or CONLIST. See Sowa, p. 396. )       
0 NESTFLAG !                            
                                        
EXIT                                    
                                        
Flags to control interpretation of      
CGRAPH                                  
                                        
-------------------------------------------- SCREEN 034
( MORE VARIABLES   LRP  2/14/85 )       
                                        
VARIABLE CSTACK 10 ALLOT                
( Stack for concept pointers )          
                                        
VARIABLE CSTACK.PTR                     
( Ptr to top of CSTACK )                
                                        
CSTACK CSTACK.PTR !                     
                                        
VARIABLE RSTACK 10 ALLOT                
( Stack for concept pointers )          
                                        
VARIABLE RSTACK.PTR                     
( Ptr to top of RSTACK )                
                                        
RSTACK RSTACK.PTR !                     
                                        
EXIT                                    
                                        
Variables for concept and relation      
stacks                                  
                                        
                                        
-------------------------------------------- SCREEN 035
( CSTACK    LRP   2/14/85 )             
                                        
: CPUSH  ( adr -- ; push adr on CSTACK) 
    CSTACK.PTR @ !                      
    2 CSTACK.PTR +! ;                   
                                        
: CDEPTH  ( -- n; depth of CSTACK)      
    CSTACK.PTR @ CSTACK -  2 / ;        
                                        
: CPOP  ( -- adr; pop adr from CSTACK)  
    CDEPTH 0=                           
    ABORT" CSTACK UNDERFLOW "           
    -2 CSTACK.PTR +!                    
    CSTACK.PTR @ @  ;                   
                                        
EXIT                                    
                                        
Operators for concepts stack.           
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 036
( RSTACK    LRP   2/14/85 )             
                                        
: RPUSH  ( adr -- ; push adr on RSTACK) 
    RSTACK.PTR @ !                      
    2 RSTACK.PTR +! ;                   
                                        
: RDEPTH  ( -- n; depth of RSTACK)      
    RSTACK.PTR @ RSTACK -  2 / ;        
                                        
: RPOP  ( -- adr; pop adr from RSTACK)  
    RDEPTH 0=                           
    ABORT" RSTACK UNDERFLOW "           
    -2 RSTACK.PTR +!                    
    RSTACK.PTR @ @ ;                    
                                        
EXIT                                    
                                        
Operators for relations stack.          
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 038
( GRAPH HEAD WORDS  LRP  3/3/85 )       
                                        
: G-LINK  ( -- n; n is relative )       
   GBASE @ RELOCATE ;                   
                                        
: C-HEAD  ( -- n; n is relative )       
   GBASE @ 2+ RELOCATE ;                
                                        
: REL-HEAD  ( -- n; n is relative )     
   GBASE @ 4 + RELOCATE ;               
                                        
: G-COUNT  ( -- n; n is relative )      
   GBASE @ 6 + RELOCATE ;               
                                        
EXIT                                    
                                        
Return relative addresses               
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 039
( NODE OPERATORS   LRP   2/3/85 )       
( Assumes node.adr relocatable )        
                                        
: LINK-PTR  ( node.adr -- link.adr )    
     LOCATE ;                           
                                        
: CON-PTR  ( cnode.adr -- con.ptr )     
     LOCATE  2+ ;                       
                                        
: REF-PTR  ( cnode.adr -- ref.adr )     
     LOCATE  4 + ;                      
                                        
: OUT-PTR  ( cnode.adr -- in.adr )      
     LOCATE 6 + ;                       
                                        
: REL-PTR  ( rnode.adr -- rel.ptr )     
     LOCATE 2+ ;                        
                                        
: <CON-PTR  ( rnode.adr -- <con.adr )   
     LOCATE 4 + ;                       
                                        
: >CON-PTR  ( n rnode.adr -- >con.adr ) 
    LOCATE 6 + SWAP 2 * + ;             
                                        
-------------------------------------------- SCREEN 040
( GETNODE      LRP   2/3/85 )           
                                        
: GETNODE  ( n -- adr of link )         
     ( Get link with n fields )         
     DUP NODES?                         
     DUP NODES @ SWAP  0 FILL           
         NODES @ SWAP                   
         NODES +!                       
         RELOCATE ;                     
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 041
( RELATIVE LIST WORDS   LRP  3/23/85  ) 
                                        
: PUTNODE                               
    ( list.adr link.adr --  )           
    ( adrs are relative to GBASE )      
    DDUP                                
    SWAP LOCATE @                       
    SWAP LOCATE !   ( link <- <list> )  
    SWAP LOCATE !  ;   ( list <- link ) 
                                        
: APPENDNODE   ( list.adr link.adr -- ) 
    ( adrs are relative to GBASE )      
    SWAP                                
    BEGIN                               
      DUP REL@                          
    WHILE                               
      REL@                              
    REPEAT                              
    SWAP PUTNODE ;                      
                                        
EXIT                                    
                                        
Words to link relocatable nodes to head 
or tail of linked list                  
-------------------------------------------- SCREEN 042
( NEWGRAPH     LRP   3/4/85 )           
                                        
: NEWGRAPH  ( -- )                      
   ( Set up graph header )              
   NODES @ GBASE !                      
   <GRAPHS>                             
   8 GETNODE LOCATE                     
     ( 0   is graph link                
       2 + is concept list              
       4 + is relation list             
       6 + is count )                   
   PUT ;                                
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 043
( CON-NODE    LRP   2/10/85 )           
                                        
: CON-NODE    ( -- )                    
        ( Given pointer to CONCEPT in   
          TEMP and referent string in   
          $BUFFER, create a new node )  
          ( linked to <CON>. )          
     $BUFFER C@ 9 + NODES?              
          ( Room in NODESPACE? )        
     8 GETNODE <CON> !                  
          ( Link node to <CON>. )       
     TEMP @  <CON> @ CON-PTR !          
          ( Store pointer to CONCEPT in 
            node. )                     
     NODES @ RELOCATE <CON> @ REF-PTR ! 
          ( Store pointer to referent   
            in node. )                  
     $BUFFER NODES @                    
     $BUFFER C@ 1+ CMOVE                
     $BUFFER C@ 1+ NODES +!             
          ( Move referent to REFSPACE. )
     C-HEAD <CON> @ APPENDNODE ;        
          ( Append to graph. )          
                                        
-------------------------------------------- SCREEN 044
( REL-NODE   LRP   2/14/85 )            
                                        
: REL-NODE  ( rel.pfa --  )             
            ( create relation node      
              linked to <REL> )         
    DUP CFA EXECUTE                     
    2* 4 + GETNODE                      
    SWAP OVER REL-PTR !                 
    <REL> !                             
    REL-HEAD <REL> @ APPENDNODE ;       
                                        
: REL-OUT  ( cnode.adr rnode.adr -- )   
           ( Store concept in right     
             location within rnode. )   
   <CON-PTR ! ;                         
                                        
: REL-IN  ( cnode.adr n rnode.adr -- )  
   >CON-PTR ! ;                         
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 045
( LINK-ARC     LRP    3/8/85 )          
                                        
: LINK-ARC   ( cnode.adr rnode.adr -- ) 
    ( Link rnode.ptr to cnode.          
      Addresses are relative. )         
    4 GETNODE                           
    DUP LOCATE 2+ ROT SWAP !            
    SWAP OUT-PTR RELOCATE               
    SWAP PUTNODE ;                      
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 046
( REL-TO-CON/CON-TO-REL   LRP  2/9/85 ) 
                                        
: REL-TO-CON   ( -- ; assumes relation  
                 pointing to concept;   
                 con.adr in <CON> and   
                 rel.adr in <REL> )     
    <CON> @ <REL> @ REL-OUT ;           
                                        
: CON-TO-REL  ( -- ; assumes concept    
                pointing to relation;   
                con.adr in <CON> and    
                rel.adr in <REL> )      
    <CON> @ <REL> @ LINK-ARC            
    <CON> @ <ARC#> @  <REL> @ REL-IN    
    0 <ARC#> ! ;                        
                                        
EXIT                                    
<ARC#> contains label of current arc    
into the relation node. Arcs are        
numbered 0 .... n, where n is the       
arc pointing away from the relation.    
Later we'll use the syntax n ARC# ->    
or n ARC# <- to set the value of        
<ARC#>.                                 
-------------------------------------------- SCREEN 047
( NODE OPERATORS   LRP   2/3/85 )       
( Assumes cnode.adr relocatable )       
                                        
: .CON   ( cnode.adr -- )               
     CON-PTR @ NFA ID. ;                
                                        
: .REF   ( cnode.adr -- )               
       ( print referent string. )       
     REF-PTR @ ?DUP IF                  
                     LOCATE             
                     COUNT TYPE         
                   THEN ;               
                                        
: .RNODE   ( rnode.adr -- )             
           ( rnode.adr is relative )    
   DUP REL-PTR @ NFA ID.                
   5 SPACES                             
   <CON-PTR @ ?DUP IF                   
                     DUP .CON  .REF     
                   THEN ;               
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 048
( .CARCS   LRP  3/9/85 )                
                                        
: .CARCS   ( cnode.adr -- )             
   CR OUT-PTR @                         
   BEGIN                                
     DUP                                
   WHILE                                
     DUP LOCATE 2+ @ 5 SPACES .RNODE CR 
     LOCATE @                           
   REPEAT DROP ;                        
                                        
: .CNODE    ( cnode.adr -- )            
   ( Given adr of node, print           
     concept, referent, and             
     arcs pointing toward relations.    
     Cnode.adr is relative. )           
   CR DUP DUP .CON .REF .CARCS ;        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 049
( .LIST    LRP   2/13/85 )              
                                        
: .CLIST  ( adr -- )                    
         ( Given head of list, prints   
           list of concept nodes. )     
     C-HEAD LOCATE @                    
      BEGIN                             
         DUP                            
      WHILE                             
         DUP .CNODE                     
         LOCATE @                       
      REPEAT DROP ;                     
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 050
( .RLIST    LRP   2/13/85 )             
                                        
: .RLIST  (  -- )                       
         ( Prints list of relation      
           nodes linked to REL-HEAD. )  
      CR REL-HEAD LOCATE @              
      BEGIN                             
         DUP                            
      WHILE                             
         DUP .RNODE CR                  
         LOCATE @                       
      REPEAT DROP ;                     
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 051
( COMPARE STRINGS   LRP  10/7/84 )      
                                        
: -TEXT   ( adr1 n1 adr2 -- n2 )        
                                        
      ( Compare strings character by )  
      ( character. String 1 at adr1; )  
      ( n1 is length; string 2 at adr2) 
      ( If n2 = 1, $1>$2; if 0, $1=$2;) 
      ( if -1, $1<$2 )                  
                                        
     DDUP + ( 2+ ) SWAP                 
     DO DROP 1+ DUP 1-                  
        C@ I C@ - DUP                   
        IF DUP ABS / LEAVE THEN         
     LOOP SWAP DROP ;                   
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 052
( COMPARE STRINGS    LRP  10/7/84 )     
                                        
: STRINGS=?  ( adr1 adr2 -- flag )      
      ( String1 at adr1; string2 at )   
      ( adr2.  Flag = 0, strings are )  
      ( = ; flag -1, $1 < $2; flag 1 )  
      ( $1 > $2 )                       
   DDUP SWAP COUNT ROT 1+  ( Set up )   
              ( stack for -TEXT )       
   -TEXT                                
   DUP IF                               
         SWAP DROP SWAP DROP ( < or >)  
       ELSE                             
         DROP SWAP C@ SWAP C@ -         
                 ( -TEXT =, compare )   
                 ( counts )             
       THEN ;                           
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 053
( COMPARE-NODES    LRP   2/10/85 )      
                                        
: NODE-EXISTS   ( node.adr -- )         
    <CON> !  ;                          
                                        
: CON=?  ( node.adr -- f; where 1 is =) 
     CON-PTR @ TEMP @ = ;               
                                        
: REF=?   ( adr -- f; where 1 is = )    
    REF-PTR @ LOCATE $BUFFER            
    STRINGS=? NOT ;                     
                                        
: COMPARE-NODES   ( cnode.adr -- )      
     C-HEAD LOCATE @                    
     BEGIN                              
         DUP                            
     WHILE                              
        DUP CON=?                       
        IF DUP REF=?                    
           IF  NODE-EXISTS EXIT         
           THEN                         
        THEN LOCATE @                   
     REPEAT                             
     DROP CON-NODE ;                    
-------------------------------------------- SCREEN 054
( LINK-ARC   LRP   2/15/85 )            
                                        
: LINK-ARCS  ( -- )                     
    ARCFLAG @ IF                        
                DIRFLAG @ IF            
                            REL-TO-CON  
                          ELSE          
                            CON-TO-REL  
                          THEN          
              THEN    0 ARCFLAG ! ;     
                                        
EXIT                                    
                                        
If ARCFLAG is set, LINK-ARCS links      
concept at <CON> to relation at         
<REL>. DIRFLAG specifies whether        
arc is pointing toward concept or       
away from concept.                      
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 060
( ->   <-     LRP     2/3/85 )          
                                        
VOCABULARY CONGRAPHS                    
                                        
CONGRAPHS DEFINITIONS                   
                                        
: ->                                    
    1 DIRFLAG !                         
    1 ARCFLAG ! ;                       
                                        
: <-                                    
    0 DIRFLAG !                         
    1 ARCFLAG ! ;                       
                                        
: ARC#   ( n -- )                       
   ( Stores label of current arc into   
     the relation in <ARC#>. )          
   <ARC#> ! ;                           
                                        
FORTH DEFINITIONS                       
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 061
( -   NL  ,   LRP     2/3/85 )          
                                        
CONGRAPHS DEFINITIONS                   
                                        
: -  ( -- )                             
   LASTFLAG @ IF                        
                <CON> @ CPUSH           
                LASTFLAG @ CPUSH        
              ELSE                      
                <REL> @ CPUSH           
                LASTFLAG @ CPUSH        
              THEN ;                    
                                        
: NL  ( -- )                            
   0 ARCFLAG !                          
   1 NESTFLAG ! ;                       
                                        
: ,  ( -- )                             
   CPOP CPOP DROP DROP ;                
                                        
FORTH DEFINITIONS                       
                                        
                                        
                                        
-------------------------------------------- SCREEN 062
(  R/CONLIST   LRP   2/13/85  )         
                                        
CONGRAPHS DEFINITIONS                   
                                        
: R/CONLIST   ( -- )                    
   NESTFLAG @                           
     IF                                 
       CPOP CPOP DDUP CPUSH CPUSH       
       SWAP IF DIRFLAG @ NOT DIRFLAG !  
              <CON> @ RPUSH             
              <CON> !                   
              LINK-ARCS  1 ARCFLAG !    
              RPOP <CON> !              
              0 NESTFLAG !              
              DIRFLAG @ NOT DIRFLAG !   
            ELSE                        
              <REL> @ RPUSH             
              <REL> !                   
            THEN                        
      THEN ;                            
                                        
FORTH DEFINITIONS                       
                                        
                                        
-------------------------------------------- SCREEN 063
( RESTORE-REL   LRP     2/3/85 )        
                                        
CONGRAPHS DEFINITIONS                   
                                        
: RESTORE-REL  ( -- )                   
   NESTFLAG @ IF                        
                RPOP <REL> !            
                0 NESTFLAG !            
              THEN ;                    
                                        
: .     ( -- )                          
   NODES @ GBASE @ - G-COUNT ! ;        
                                        
                                        
                                        
FORTH DEFINITIONS                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 064
( [  [  (     LRP     2/3/85 )          
                                        
CONGRAPHS DEFINITIONS                   
                                        
: [    ( -- )                           
       FIND 2+                          
       TEMP ! ;                         
                                        
: ]   ( -- )                            
      R/CONLIST                         
      45 45 42 3                        
      4 0 DO                            
             I $BUFFER + C!             
          LOOP                          
      COMPARE-NODES                     
      LINK-ARCS                         
      RESTORE-REL                       
      1 LASTFLAG ! ;                    
                                        
: (                                     
     FIND 2+ REL-NODE ;                 
                                        
FORTH DEFINITIONS                       
                                        
-------------------------------------------- SCREEN 065
\ :  )   LRP   2/13/85                  
                                        
CONGRAPHS DEFINITIONS                   
                                        
: )                                     
    DIRFLAG @ NOT DIRFLAG !             
    LINK-ARCS                           
    0 LASTFLAG ! ;                      
                                        
: :                                     
    R/CONLIST                           
    93 WORD                             
    DUP C@ 1+                           
        $BUFFER                         
        SWAP CMOVE                      
        COMPARE-NODES                   
        LINK-ARCS                       
        RESTORE-REL                     
        1 LASTFLAG ! ;                  
                                        
FORTH DEFINITIONS                       
                                        
                                        
                                        
-------------------------------------------- SCREEN 070
EXIT                                    
                                        
This sections starts the traversal      
routine for the CGRAPHS.                
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 071
( QUEUE    LRP   3/12/85 )              
                                        
VARIABLE QLENGTH                        
                                        
10 QLENGTH !                            
                                        
VARIABLE QUEUE QLENGTH @ 2* ALLOT       
                                        
VARIABLE FRONT                          
                                        
1 FRONT !                               
                                        
VARIABLE REAR                           
                                        
1 REAR !                                
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 072
( ADDQ      LRP     3/12/85 )           
                                        
: ADDQ    ( n -- )                      
   REAR @ 1+ QLENGTH @ MOD REAR !       
   REAR @ FRONT @ =                     
   IF                                   
     REAR @ 1- REAR !                   
     ABORT" QUEUE FULL "                
   THEN                                 
   REAR @ 2* QUEUE + ! ;                
                                        
: FRONTQ   ( -- n )                     
   FRONT @ REAR @ =                     
   ABORT" QUEUE EMPTY "                 
   FRONT @ 1+ QLENGTH @ MOD FRONT !     
   FRONT @ 2* QUEUE + @ ;               
                                        
: ISEMTQ  ( -- f; 1 means Q is empty )  
   FRONT @ REAR @ =  ;                  
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 073
( GRAPH TRAVERSAL  3/17/85   LRP  )     
                                        
VARIABLE VISIT 40 ALLOT                 
                                        
: INIT-VISIT  ( -- )                    
   VISIT  0 20 FILL ;                   
                                        
INIT-VISIT                              
                                        
: !VISIT   ( n index -- )               
     ( n is value to store, index is    
       index into VISIT )               
     2* VISIT + ! ;                     
                                        
: @VISIT  ( index -- n )                
     2* VISIT + @ ;                     
                                        
VARIABLE #CONS                          
( Number of concepts in graph. )        
                                        
VARIABLE #RELS                          
( Number of relations in graph. )       
                                        
                                        
-------------------------------------------- SCREEN 074
( VISITED    3/17/85 LRP  )             
                                        
: <VISITED>  ( index -- )               
    ( node < 0 means node visited. )    
   DUP @VISIT NEGATE                    
    SWAP !VISIT ;                       
                                        
: <?VISITED>  ( index -- flag; where    
               1 means visited. )       
   @VISIT 0< ;                          
                                        
: INDEX?   ( node -- index flag;        
             where 1 means found. )     
   VISIT @                              
   1 DO                                 
       DUP I @VISIT ABS                 
             = IF                       
                 DROP I 0 LEAVE         
               THEN                     
     LOOP IF                            
            0                           
          ELSE                          
            1                           
          THEN ;                        
-------------------------------------------- SCREEN 075
( VISITED    3/17/85    LRP   )         
                                        
: VISITED  ( node -- )                  
   INDEX?                               
   IF                                   
     <VISITED>                          
   ELSE                                 
     1 ABORT" GRAPH ERROR"              
   THEN ;                               
                                        
: ?VISITED   ( node -- flag; where      
               1 means visted. )        
   INDEX?                               
   IF                                   
     <?VISITED>                         
   ELSE                                 
     1 ABORT" GRAPH ERROR"              
   THEN ;                               
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 076
( !CONS    LRP   2/13/85 )              
                                        
: !CONS   (  -- )                       
         ( Stores cnodes in VISIT.      
           Number nodes is stored in    
           0 VISIT. )                   
     1 VISIT !  0 #CONS !               
     CR                                 
     C-HEAD LOCATE @                    
      BEGIN                             
         DUP                            
      WHILE                             
         DUP VISIT @ !VISIT             
         LOCATE @                       
         1 VISIT +!  1 #CONS +!         
      REPEAT DROP ;                     
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 077
( !NODES   LRP   2/13/85 )              
                                        
: !RELS   (  -- )                       
          ( Stores rnodes in VISIT. )   
     0 #RELS !                          
     REL-HEAD LOCATE @                  
      BEGIN                             
         DUP                            
      WHILE                             
         DUP VISIT @ !VISIT             
         LOCATE @                       
         1 VISIT +!   1 #RELS +!        
      REPEAT DROP ;                     
                                        
: !NODES  ( -- )                        
    !CONS  !RELS ;                      
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 078
( -VISITED   3/17/85  LRP  )            
                                        
: -VISITED   ( -- node.adr flag; where  
               1 means -visited node    
               found, 0 means not       
               found. )                 
   0                                    
   VISIT @                              
   1 DO                                 
       I @VISIT                         
       0> IF                            
            DROP I @VISIT 1 LEAVE       
          THEN                          
     LOOP ;                             
                                        
VARIABLE <NODETYPE>                     
                                        
: NODETYPE  ( node.adr -- f; where      
              1 is cnode, 0 is rnode. ) 
    1 SWAP                              
    INDEX? DROP #CONS @ > IF NOT THEN   
    <NODETYPE> ! ;                      
                                        
                                        
-------------------------------------------- SCREEN 079
EXIT                                    
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 080
( NODES-TO-Q     3/17/85    LRP  )      
                                        
: NODE-TO-Q  ( node.adr -- )            
   ( Checks to see if node has been     
     visited. If not, adds node to      
     queue and marks it visited. )      
   DUP ?VISITED NOT                     
   IF                                   
     DUP ADDQ VISITED                   
   ELSE                                 
     DROP                               
   THEN ;                               
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 081
( C-ADJ    3/17/85   LRP  )             
                                        
: C-ADJ  ( cnode.adr -- )               
   ( Check to all nodes adjacent        
     to cnode.  If not visited, add     
     to queue and mark visited. )       
   OUT-PTR @                            
   BEGIN                                
    DUP                                 
   WHILE                                
    DUP LOCATE 2+ @                     
    NODE-TO-Q                           
    LOCATE @                            
   REPEAT DROP ;                        
                                        
: R-ADJ  ( rnode.adr -- )               
   ( Check node adjacent to rnode.      
     If not visited, add to queue and   
     mark visited. )                    
     <CON-PTR @ DUP IF                  
                      NODE-TO-Q         
                    ELSE                
                      DROP              
                    THEN ;              
-------------------------------------------- SCREEN 082
( VISITING   3/17/85   LRP  )           
                                        
: VISITING  ( node.adr -- )             
   CR                                   
   DUP NODETYPE                         
       <NODETYPE> @                     
       IF                               
          DUP C-ADJ                     
          DUP .CON .REF CR              
       ELSE                             
          DUP R-ADJ                     
          REL-PTR @ NFA ID. CR          
       THEN ;                           
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 083
( BFS     3/17/85   LRP  )              
                                        
: BFS  ( -- )                           
   !NODES                               
   BEGIN                                
   -VISITED                             
   WHILE                                
     DUP ADDQ VISITED                   
       BEGIN                            
         ISEMTQ NOT                     
       WHILE                            
         FRONTQ                         
         VISITING                       
       REPEAT                           
   REPEAT ;                             
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 108
                                        
: DISCRIMINATE                          
    CREATE                              
      HERE                              
      4 ALLOT                           
      34 WORD DROP                      
      34 WORD C@ 1+ ALLOT               
      DUP FIND 2+ SWAP !                
          FIND 2+ SWAP 2+ !             
    DOES>                               
      DUP                               
      CR 4 + COUNT TYPE                 
      KEY DUP EMIT                      
      89 = IF @ CFA EXECUTE             
           ELSE                         
              2+ @ CFA EXECUTE          
           THEN ;                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 109
: INGEST CR ." USE  INGEST" ;           
: EAT    CR ." USE EAT" ;               
: DRINK  CR ." USE DRINK1" ;            
: DRINK2 CR ." USE DRINK2" ;            
: INHALE CR ." USE INHALE" ;            
: BREATH CR ." USE BREATHE" ;           
: SMOKE  CR ." USE SMOKE" ;             
: TAKE   CR ." USE TAKE" ;              
DISCRIMINATE INGESTED                   
   "IS IT INGESTED VIA THE MOUTH? "     
   EAT INGEST                           
DISCRIMINATE ALCOHOL                    
   "IS IT ALCOHOL? "                    
   DRINK2 DRINK                         
DISCRIMINATE FLUID                      
   "IS IT A FLUID? "                    
   ALCOHOL INGESTED                     
DISCRIMINATE AIR                        
   "IS IT AIR? "                        
   BREATH INHALE                        
DISCRIMINATE SMOKING                    
   "IS IT SMOKE FROM SOMETHING NORMALLY 
USED FOR SMOKING? "                     
   SMOKE AIR                            
-------------------------------------------- SCREEN 110
( DATA       LRP  1/26/85 )             
                                        
POS NOUN                                
POS VERB                                
POS ADJECTIVE                           
POS ADVERB                              
POS DET                                 
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 111
( EXAMPLE ENTRIES    LRP   1/16/85 )    
                                        
                                        
CONCEPT FELINE                          
CONCEPT MAMMAL                          
CONCEPT ANIMATE                         
CONCEPT EARTHMOVER                      
CONCEPT INANIMATE                       
CONCEPT CANINE                          
                                        
2 RELATION AGNT                         
2 RELATION OBJ                          
2 RELATION INST                         
2 RELATION MATR                         
2 RELATION PART                         
3 RELATION BTWN                         
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 112
( EXAMPLE ENTRIES    LRP   1/16/85 )    
                                        
FELINE IS-A MAMMAL                      
MAMMAL IS-A ANIMATE                     
EARTHMOVER IS-A INANIMATE               
CANINE IS-A MAMMAL                      
                                        
VOCAB cat                               
VOCAB tabby                             
VOCAB dog                               
                                        
NOUN cat MEANS FELINE                   
NOUN cat MEANS EARTHMOVER               
NOUN dog MEANS CANINE                   
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 113
                                        
                                        
                                        
                                        
                                        
CONCEPT HOUSEPET                        
FELINE IS-A HOUSEPET                    
                                        
CONCEPT ENTITY                          
ANIMATE IS-A ENTITY                     
                                        
CONCEPT POSSESSION                      
HOUSEPET IS-A POSSESSION                
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 130
DISCRIMINATE GAS                        
  "IS IT A GAS? "                       
  SMOKING FLUID                         
DISCRIMINATE MEDICINE                   
  "IS IT A MEDICINE? "                  
  TAKE GAS                              
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
